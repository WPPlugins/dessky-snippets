<?php
/**
 * Plugin Name: Dessky Snippets
 * Description: This is a lightweight and simple plugin that gives you the ability to easily add your custom PHP code from WordPress admin.
 * Author: Dessky
 * Author URI: http://dessky.com
 * Version: 1.0
 * License: GPL3
 * Text Domain: dessky-snippets
 *
 * Copyright 2017 Dessky
 * Copyright 2014-2016 Arthur Gareginyan
 *
 * This file is part of "Dessky Snippets".
 *
 * "Dessky Snippets" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "Dessky Snippets" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "Dessky Snippets".  If not, see <http://www.gnu.org/licenses/>.
 *
 */


/**
 * Prevent Direct Access
 *
 * @since 0.1
 */
defined('ABSPATH') or die("Restricted access!");

/**
 * Define constants
 *
 * @since 3.5
 */
defined('DSNP_DIR') or define('DSNP_DIR', dirname(plugin_basename(__FILE__)));
defined('DSNP_BASE') or define('DSNP_BASE', plugin_basename(__FILE__));
defined('DSNP_URL') or define('DSNP_URL', plugin_dir_url(__FILE__));
defined('DSNP_PATH') or define('DSNP_PATH', plugin_dir_path(__FILE__));
defined('DSNP_TEXT') or define('DSNP_TEXT', 'dessky-snippets');
defined('DSNP_VERSION') or define('DSNP_VERSION', '3.5');

/**
 * Print direct link to Custom Functions admin page
 *
 * Fetches array of links generated by WP Plugin admin page ( Deactivate | Edit )
 * and inserts a link to the Custom Functions admin page
 *
 * @since  2.2
 * @param  array $links Array of links generated by WP in Plugin Admin page.
 * @return array        Array of links to be output on Plugin Admin page.
 */
function dsnp_settings_link( $links ) {
    $settings_page = '<a href="' . admin_url( 'themes.php?page=dessky-snippets.php' ) .'">' . __( 'Settings', DSNP_TEXT ) . '</a>';
    array_unshift( $links, $settings_page );
    return $links;
}
add_filter( 'plugin_action_links_'.DSNP_BASE, 'dsnp_settings_link' );

/**
 * Register "Custom Functions" submenu in "Appearance" Admin Menu
 *
 * @since 2.2
 */
function dsnp_register_submenu_page() {
    add_theme_page( __( 'Dessky Snippets', DSNP_TEXT ), __( 'Dessky Snippets', DSNP_TEXT ), 'edit_theme_options', basename( __FILE__ ), 'dsnp_render_submenu_page' );
}
add_action( 'admin_menu', 'dsnp_register_submenu_page' );

/**
 * Attach Settings Page
 *
 * @since 3.0
 */
require_once( DSNP_PATH . 'core/settings.php' );

/**
 * Register settings
 *
 * @since 2.0
 */
function dsnp_register_settings() {
    register_setting( 'dsnp_settings_group', 'dsnp_settings' );
    register_setting( 'dsnp_settings_group', 'dsnp_error' );
}
add_action( 'admin_init', 'dsnp_register_settings' );

/**
 * Load scripts and style sheet for settings page
 *
 * @since 3.1
 */
function dsnp_load_scripts($hook) {

    // Return if the page is not a settings page of this plugin
    if ( 'appearance_page_dessky-snippets' != $hook ) {
        return;
    }

    // JavaScript
    wp_enqueue_script( 'dsnp-admin-js', DSNP_URL . 'assets/js/dessky-snippets.js', array(), false, true );

    // CodeMirror
    wp_enqueue_style( 'dsnp-codemirror-css', DSNP_URL . 'assets/lib/codemirror/codemirror.css' );
    wp_enqueue_script( 'dsnp-codemirror-js', DSNP_URL . 'assets/lib/codemirror/codemirror-compressed.js' );
	
	// Style sheet
    wp_enqueue_style( 'dsnp-admin-css', DSNP_URL . 'assets/css/dessky-snippets.css' );

}
add_action( 'admin_enqueue_scripts', 'dsnp_load_scripts' );

/**
 * Prepare the user entered code for execution
 *
 * @since 2.4
 */
function dsnp_prepare($content) {

    // Cleaning
    $content = trim( $content );
    $content = ltrim( $content, '<?php' );
    $content = rtrim( $content, '?>' );

    // Return prepared code
    return $content;
}

/**
 * Check the user entered code for duplicate names of functions
 *
 * @since 2.5.1
 */
function dsnp_duplicates($content) {

    // Find names of user entered functions and check for duplicates
    preg_match_all('/function[\s\n]+(\S+)[\s\n]*\(/i', $content, $user_func_names);
    $user_func_a = count( $user_func_names[1] );
    $user_func_b = count( array_unique( $user_func_names[1] ) );

    // Find all names of declared user functions and mutch with names of user entered functions
    $declared_func = get_defined_functions();
    $declared_func_user = array_intersect( $user_func_names[1], $declared_func['user'] );
    $declared_func_internal = array_intersect( $user_func_names[1], $declared_func['internal'] );

    // Update error status
    if ( $user_func_a != $user_func_b OR count( $declared_func_user ) != 0 OR count( $declared_func_internal ) != 0 ) {
        update_option( 'dsnp_error', '1' );   // ERROR
        $error_status = '1';
    } else {
        update_option( 'dsnp_error', '0' );   // RESET ERROR VALUE
        $error_status = '0';
    }

    // Return error status
    return $error_status;
}

/**
 * Execute the user entered code
 *
 * @since 3.2
 */
function dsnp_exec() {

    // If STOP file exist...
    if ( file_exists( DSNP_PATH . 'STOP' ) ) {
        return;   // EXIT
    }

    // Read data from DB
    $options = get_option( 'dsnp_settings' );
    $content = isset( $options['dsnp-content'] ) && !empty( $options['dsnp-content'] ) ? $options['dsnp-content'] : ' ';
    $disable = isset( $options['disable'] ) && !empty( $options['disable'] ) ? $options['disable'] : ' ';

    // If the user entered code is disabled...
    if ( $disable == 'on') {
        return;   // EXIT
    }

    // Prepare the user entered functions by calling the "prepare" function
    $content = dsnp_prepare($content);

    // If content is empty...
    if ( empty($content) OR $content == ' ' ) {
        return;   // EXIT
    }

    // If the duplicates functions finded...
    $duplicates = dsnp_duplicates($content);
    if ( $duplicates != 0 ) {
        return;   // EXIT
    }

    // Parsing and execute by Eval
    if( false === @eval( $content ) ) {
        update_option( 'dsnp_error', '1' );   // ERROR
        return;   // EXIT
    } else {
        update_option( 'dsnp_error', '0' );   // RESET ERROR VALUE
    }
}
dsnp_exec();

/**
 * Delete options on uninstall
 *
 * @since 0.1
 */
function dsnp_uninstall() {
    delete_option( 'dsnp_settings' );
    delete_option( 'dsnp_error' );
}
register_uninstall_hook( __FILE__, 'dsnp_uninstall' );

?>